{"version":3,"file":"static/js/2.7c649208.chunk.js","mappings":"4TAEAA,IAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAU,mCAET,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,oGACkBF,IAAAA,IAAA,sCAAyCC,IAD3D,cACCE,EADD,yBAEEA,EAASC,KAAKC,SAFhB,kEAKA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA8BC,GAA9B,uFACkBP,IAAAA,IAAA,gBAAmBO,EAAnB,oBAAsCN,IADxD,cACCE,EADD,yBAEEA,EAASC,MAFX,kEAKA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAA6BD,GAA7B,uFACkBP,IAAAA,IAAA,gBACZO,EADY,4BACeN,IAFjC,cACCE,EADD,yBAIEA,EAASC,KAAKK,MAJhB,kEAOA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAgCH,GAAhC,uFACiBP,IAAAA,IAAA,gBACXO,EADW,4BACgBN,EADhB,2BADjB,cACCU,EADD,yBAIEA,EAAQP,KAAKC,SAJf,kEAOA,SAAeO,EAAtB,+CAAO,OAAP,oBAAO,WAAiCC,GAAjC,uFACiBb,IAAAA,IAAA,+BACIC,EADJ,kBACqBY,IAFtC,cACCF,EADD,yBAIEA,EAAQP,KAAKC,SAJf,oE,0IC3BQ,SAASS,IACtB,IAAMC,GAAUC,EAAAA,EAAAA,MAEhB,OACE,mBACEC,KAAK,WACLC,QAAS,WACPH,EAAQI,UAHZ,qBCQJ,IAAMC,GAAOC,EAAAA,EAAAA,OAAK,kBAAM,iCAClBC,GAAUD,EAAAA,EAAAA,OAAK,kBAAM,iCAEZ,SAASE,IACtB,IAAQhB,GAAYiB,EAAAA,EAAAA,MAAZjB,QACR,GAA0BkB,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAsBC,EAAAA,EAAAA,MAAdC,EAAR,EAAQA,IAAKC,EAAb,EAAaA,KACPC,GAAWC,EAAAA,EAAAA,MAOjB,OAJAC,EAAAA,EAAAA,YAAU,WACRC,EAAAA,GAAmB3B,GAAS4B,KAAKR,KAChC,CAACpB,KAGF,iCACE,SAACO,EAAD,IACCY,IACC,iBAAKU,UAAU,YAAf,WACE,gBACEC,IACEX,EAAMY,YAAN,yCACsCZ,EAAMY,aACxC,eAENC,IAAKb,EAAMc,WAEb,iBAAKJ,UAAU,kBAAf,WACE,wBAAKV,EAAMe,SACX,wCAAgBC,KAAKC,MAA2B,GAArBjB,EAAMkB,cAAjC,QACA,qCACA,uBAAIlB,EAAMmB,YACV,mCACA,uBACGnB,EAAMoB,OAAOC,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,GAAT,OAChB,4BAAgBD,EAAhB,MAAWC,eAMrB,mBACA,4BACE,oDACA,2BACE,yBACE,SAAC,KAAD,CACEC,GAAI,CACFC,SAAUtB,EAAM,QAChBuB,OAAM,kBAAMrB,EAASqB,OAAhB,IAAuBH,GAAI1C,KAHpC,qBASF,yBACE,SAAC,KAAD,CACE2C,GAAI,CACFC,SAAUtB,EAAM,WAChBuB,OAAM,kBAAMrB,EAASqB,OAAhB,IAAuBH,GAAI1C,KAHpC,8BAWN,mBACA,SAAC,EAAA8C,SAAD,CAAUC,UAAU,uCAApB,UACE,UAAC,KAAD,YACE,SAAC,KAAD,CAAOC,OAAK,EAACzB,KAAI,UAAKA,EAAL,SAAjB,UACE,SAACV,EAAD,OAEF,SAAC,KAAD,CAAOmC,OAAK,EAACzB,KAAI,UAAKA,EAAL,YAAjB,UACE,SAACR,EAAD","sources":["services/movies-api.js","components/ButtonGoBack/ButtonGoBack.js","views/MovieDetailsPage.js"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '2834cce01162bee50a22c300f1f38e88';\n\nexport async function fetchTrends() {\n  const response = await axios.get(`trending/movie/week?api_key=${API_KEY}`);\n  return response.data.results;\n}\n\nexport async function fetchMovieById(movieId) {\n  const response = await axios.get(`movie/${movieId}?api_key=${API_KEY}`);\n  return response.data;\n}\n\nexport async function fetchCastInfo(movieId) {\n  const response = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n  return response.data.cast;\n}\n\nexport async function fetchReviewsInfo(movieId) {\n  const respons = await axios.get(\n    `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return respons.data.results;\n}\n\nexport async function fetchFilmsByQuery(query) {\n  const respons = await axios.get(\n    `search/movie?api_key=${API_KEY}&query=${query}`\n  );\n  return respons.data.results;\n}\n","import { useHistory } from 'react-router';\n\nexport default function ButtonGoBack() {\n  const history = useHistory();\n\n  return (\n    <button\n      type=\"  button\"\n      onClick={() => {\n        history.goBack();\n      }}\n    >\n      Go back\n    </button>\n  );\n}\n","import { useState, useEffect, lazy, Suspense } from 'react';\nimport {\n  NavLink,\n  useRouteMatch,\n  useParams,\n  Switch,\n  useLocation,\n  Route,\n} from 'react-router-dom';\nimport * as api from '../services/movies-api';\nimport ButtonGoBack from '../components/ButtonGoBack/ButtonGoBack';\n// import Cast from './Cast';\n// import Reviews from './Reviews';\n\nconst Cast = lazy(() => import('./Cast'));\nconst Reviews = lazy(() => import('./Reviews'));\n\nexport default function MovieDetailsPage() {\n  const { movieId } = useParams();\n  const [movie, setMovie] = useState(null);\n  const { url, path } = useRouteMatch();\n  const location = useLocation();\n  // const history = useHistory();\n\n  useEffect(() => {\n    api.fetchMovieById(movieId).then(setMovie);\n  }, [movieId]);\n\n  return (\n    <>\n      <ButtonGoBack />\n      {movie && (\n        <div className=\"movieCard\">\n          <img\n            src={\n              movie.poster_path\n                ? `https://image.tmdb.org/t/p/w500${movie.poster_path}`\n                : 'defaultImage'\n            }\n            alt={movie.tagline}\n          />\n          <div className=\"movieCard__dscr\">\n            <h2>{movie.title}</h2>\n            <p>User score: {Math.round(movie.vote_average * 10)}%</p>\n            <b>Overview</b>\n            <p>{movie.overview}</p>\n            <b>Genres</b>\n            <p>\n              {movie.genres.map(({ name, id }) => (\n                <span key={id}>{name} </span>\n              ))}\n            </p>\n          </div>\n        </div>\n      )}\n      <hr />\n      <div>\n        <h3>Additional information</h3>\n        <ul>\n          <li>\n            <NavLink\n              to={{\n                pathname: url + '/cast',\n                state: { ...location.state, id: movieId },\n              }}\n            >\n              Cast\n            </NavLink>\n          </li>\n          <li>\n            <NavLink\n              to={{\n                pathname: url + '/reviews',\n                state: { ...location.state, id: movieId },\n              }}\n            >\n              Reviews\n            </NavLink>\n          </li>\n        </ul>\n      </div>\n      <hr />\n      <Suspense fallback={<h2>Loading...</h2>}>\n        <Switch>\n          <Route exact path={`${path}/cast`}>\n            <Cast />\n          </Route>\n          <Route exact path={`${path}/reviews`}>\n            <Reviews />\n          </Route>\n        </Switch>\n      </Suspense>\n    </>\n  );\n}\n"],"names":["axios","API_KEY","fetchTrends","response","data","results","fetchMovieById","movieId","fetchCastInfo","cast","fetchReviewsInfo","respons","fetchFilmsByQuery","query","ButtonGoBack","history","useHistory","type","onClick","goBack","Cast","lazy","Reviews","MovieDetailsPage","useParams","useState","movie","setMovie","useRouteMatch","url","path","location","useLocation","useEffect","api","then","className","src","poster_path","alt","tagline","title","Math","round","vote_average","overview","genres","map","name","id","to","pathname","state","Suspense","fallback","exact"],"sourceRoot":""}